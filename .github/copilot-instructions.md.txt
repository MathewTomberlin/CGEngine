This project uses SFML and OpenGL via C++ to render 2D and 3D content. This project is a scripting engine which allows the user to create scriptable Body objects as wrappers for OpenGL meshes (and SFML primitives). This project is open-source and ideally designed to be as easy and intuitive as possible for a user to develop 3D applications with.

This project is currently designed to use up-to OpenGl version 3.3. It uses CMake to build the project and move resources. This project makes use of the Assimp mesh loading library to allow importing a variety of mesh formats.

This scripting engine is designed with static objects created in the Engine class when the application starts and which are available to all objects during the application lifetime, like the World and Texture cache. It uses the UniqueDomain class to store uniquely identifiable pointers and attempts to cache loaded resources like Textures. Scripts are objects attached to a Body that can have ScArgs, or Script Args, that define input and output data for the script. Scripts call a ScriptEvent lambda that is provided the calling Body and Script. Behaviors are objects attached to Bodies that have Scripts but don't have transforms themselves. Scripts on Bodies or Behaviors are called at a variety of times, including when a Body is created, updated, or destroyed, or as callbacks to user input. The World class is responsible for managing the state of the engine world and holds references to the Bodies. The Renderer handles most of the code related to OpenGL itself, including binding vertex arrays and buffers and setting uniforms on shaders. If you notice some detail of the project code doesn't match these descriptions, point it out and offer suggestions, if possible.